const isPalindrome = (word) => {
    const firstHalve = word.slice(0, word.length / 2)

    const secondHalve = [...word.slice(Math.ceil(word.length / 2))].reverse().join("")

    return firstHalve == secondHalve
}

test('07', () => {
    expect(isPalindrome("aia")).toBe(true)
    expect(isPalindrome("aibofobia")).toBe(true)
    expect(isPalindrome("ala")).toBe(true)
    expect(isPalindrome("ama")).toBe(true)
    expect(isPalindrome("ana")).toBe(true)
    expect(isPalindrome("anilina")).toBe(true)
    expect(isPalindrome("ata")).toBe(true)
    expect(isPalindrome("arara")).toBe(true)
    expect(isPalindrome("asa")).toBe(true)
    expect(isPalindrome("ele")).toBe(true)
    expect(isPalindrome("esse")).toBe(true)
    expect(isPalindrome("mamam")).toBe(true)
    expect(isPalindrome("matam")).toBe(true)
    expect(isPalindrome("metem")).toBe(true)
    expect(isPalindrome("mirim")).toBe(true)
    expect(isPalindrome("oco")).toBe(true)
    expect(isPalindrome("omissíssimo")).toBe(true)
    expect(isPalindrome("osso")).toBe(true)
    expect(isPalindrome("ovo")).toBe(true)
    expect(isPalindrome("radar")).toBe(true)
    expect(isPalindrome("raiar")).toBe(true)
    expect(isPalindrome("ralar")).toBe(true)
    expect(isPalindrome("rapar")).toBe(true)
    expect(isPalindrome("rasar")).toBe(true)
    expect(isPalindrome("reger")).toBe(true)
    expect(isPalindrome("reler")).toBe(true)
    expect(isPalindrome("reter")).toBe(true)
    expect(isPalindrome("rever")).toBe(true)
    expect(isPalindrome("reviver")).toBe(true)
    expect(isPalindrome("rir")).toBe(true)
    expect(isPalindrome("sacas")).toBe(true)
    expect(isPalindrome("saias")).toBe(true)
    expect(isPalindrome("salas")).toBe(true)
    expect(isPalindrome("socos")).toBe(true)
    expect(isPalindrome("sopapos")).toBe(true)
    expect(isPalindrome("sós")).toBe(true)
    expect(isPalindrome("")).toBe(true)
    expect(isPalindrome("anaconda")).toBe(false)
});